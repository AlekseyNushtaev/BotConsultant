import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
import asyncio

TOKEN = "7467186280:AAFrTYhr5SBy-EDyGr3vGUvGglUePUxpNZc"
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
def get_participate_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data="participate")
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /post (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤)
@dp.message(Command("post"), F.chat.type.in_({"group", "supergroup"}))
async def post_message(message: types.Message):
    await message.answer(
        "üéâ –ü—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –Ω–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!",
        reply_markup=get_participate_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@dp.callback_query(F.data == "participate")
async def handle_participation(callback: types.CallbackQuery, bot: Bot):
    user = callback.from_user
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É
        await bot.send_message(
            chat_id=user.id,
            text=f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üéâ"
        )
        await callback.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        error_message = f"‚ùå {user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–∫—É —Å–Ω–∞—á–∞–ª–∞!"
        await callback.answer(error_message, show_alert=True)
        logging.error(f"Error sending message to {user.id}: {e}")

async def main():
    bot = Bot(token=TOKEN)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


logging.basicConfig(level=logging.INFO)
asyncio.run(main())