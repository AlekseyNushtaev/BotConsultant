import asyncio
import csv
import datetime
import openpyxl
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import bot
from spread import get_sheet

from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, StateFilter, ChatMemberUpdatedFilter, KICKED, MEMBER
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated, FSInputFile, InlineKeyboardButton, InputMediaPhoto, \
    InputMediaVideo, InputMediaDocument
from collections import defaultdict
from typing import Dict, List
from config import ADMIN_IDS
from db.util import add_user_to_db, update_user_blocked, update_user_unblocked, add_question_to_db, get_all_questions, \
    delete_all_questions, get_all_users, get_all_users_unblock
from keyboard import create_kb, kb_button

router = Router()

media_groups: Dict[str, List[Message]] = defaultdict(list)
timers: Dict[str, asyncio.Task] = {}
builder = InlineKeyboardBuilder()

builder.row(InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚úÖ", callback_data="quest_1"))
builder.row(InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª", url="https://t.me/andreikuvshinov"))

main_keyboard_markup = builder.as_markup()

class FSMFillForm(StatesGroup):
    get_full_name = State()
    get_question = State()
    get_contact = State()
    send = State()
    text_add_button = State()
    check_text_1 = State()
    check_text_2 = State()
    text_add_button_text = State()
    text_add_button_url = State()
    photo_add_button = State()
    check_photo_1 = State()
    check_photo_2 = State()
    photo_add_button_text = State()
    photo_add_button_url = State()
    video_add_button = State()
    check_video_1 = State()
    check_video_2 = State()
    video_add_button_text = State()
    video_add_button_url = State()
    check_video_note_1 = State()
    send_id = State()
    send_to_one = State()


async def scheduler(time):
    while True:
        await asyncio.sleep(10)
        print(datetime.datetime.now())
        try:
            sheet = await get_sheet()
            sheet.clear()
            quests = get_all_questions()
            users = get_all_users()
            sheet.append_rows(quests)
            sheet.append_rows(users)
            empty_row = ['' for cell in range(sheet.col_count)]
            sheet.insert_row(empty_row, len(quests) + 1)
            print(datetime.datetime.now())
        except Exception as e:
            await bot.send_message(1012882762, str(e))
        await asyncio.sleep(time)


async def process_media_group(media_group_id: str):
    await asyncio.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã
    messages = media_groups.pop(media_group_id, [])

    if not messages:
        return

    # –°–æ–±–∏—Ä–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –∞–ª—å–±–æ–º–∞
    media = []
    for idx, msg in enumerate(messages):
        if msg.photo:
            file_id = msg.photo[-1].file_id
            item = InputMediaPhoto(media=file_id)
        elif msg.video:
            file_id = msg.video.file_id
            item = InputMediaVideo(media=file_id)
        elif msg.document:
            file_id = msg.document.file_id
            item = InputMediaDocument(media=file_id)
        else:
            continue

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        if idx == 0 and msg.caption:
            item.caption = msg.caption
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ parse_mode
            if hasattr(msg, 'parse_mode'):
                item.parse_mode = msg.parse_mode

        media.append(item)

    if media:
        users = get_all_users()
        cnt = 0
        for user in users[1:]:
            if not user[6]:
                try:
                    await bot.send_media_group(chat_id=int(user[1]), media=media)
                    await asyncio.sleep(0.2)
                    cnt += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
        await bot.send_message(1012882762, f'–ü–µ—Ä–µ—Å–ª–∞–Ω–æ {cnt} —é–∑–µ—Ä–∞–º')


@router.message(CommandStart(), StateFilter(default_state))
async def process_start_user(message: Message):
    add_user_to_db(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name,
        datetime.datetime.now()
    )
    await message.answer_video_note('DQACAgIAAxkBAAMkZ7YTobVOP3LcI_-weFilb18kwXkAAiJtAALpnalJe1wSU2ZnRM82BA')
    await asyncio.sleep(0.3)
    await message.answer(
        text="""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëãüèª

–í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ê–Ω–¥—Ä–µ—è –ö—É–≤—à–∏–Ω–æ–≤–∞ ‚Äì –±–∏–∑–Ω–µ—Å-—é—Ä–∏—Å—Ç–∞.

üîπ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–∞, –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –∏ –∑–∞—â–∏—Ç—ã –±–∏–∑–Ω–µ—Å–∞.

üìå –ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–æ—Ä–º—É ‚Äì –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

üíº –ü–æ–º–æ–≥–∞–µ–º –±–∏–∑–Ω–µ—Å—É —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Å—Ç–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!
        """,
        parse_mode=ParseMode.HTML,
        reply_markup=main_keyboard_markup
    )
    await asyncio.sleep(1)
    await message.answer(text="""
–ú—ã –≤ –Æ–ö ¬´–°–¢–ê–†–¢¬ª –Ω–µ –ø—Ä–æ—Å—Ç–æ —é—Ä–∏—Å—Ç—ã ‚Äî –º—ã –≤–∞—à–∏ –∞–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–æ—é–∑–Ω–∏–∫–∏. –ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å 3 –ø—Ä–∞–∫—Ç–∏—á–Ω—ã—Ö –≥–∞–π–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–µ—Ä–µ–∂–∏—Ç—å –Ω–∞–ª–æ–≥–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –Ω–µ —É—Ç–æ–Ω—É—Ç—å –≤ –∫—Ä–∏–∑–∏—Å–µ.

üìç –ü–µ—Ä–≤—ã–π –≥–∞–π–¥ ‚Äî –∞–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏: –∫–∞–∫ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –ª–∏–∑–∏–Ω–≥–æ–º –∏ –±–∞–Ω–∫–∞–º–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –¥–µ–±–∏—Ç–æ—Ä–∫–æ–π, –∫–∞–∫ –Ω–µ —Å–ª–∏—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ –∏ –Ω–µ —É–≥–æ–¥–∏—Ç—å –ø–æ–¥ —Å—É–±—Å–∏–¥–∏–∞—Ä–∫—É.

üìç –í—Ç–æ—Ä–æ–π ‚Äî –ø—Ä–æ –Ω–∞–ª–æ–≥–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2025: —á—Ç–æ –∂–¥–∞—Ç—å, –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å (–∞ –≥–ª–∞–≤–Ω–æ–µ ‚Äî —á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å), —á—Ç–æ–±—ã –Ω–µ –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ –ø–ª–∞–Ω–µ –≤—ã–µ–∑–¥–Ω–æ–π.

üìç –¢—Ä–µ—Ç–∏–π –≥–∞–π–¥ ‚Äî —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞—é—Ç –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é –∏–ª–∏ –ú–í–î, –∫–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é, –∫–∞–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–æ–≤–µ—Ä—à–∞—é—Ç –¥–∞–∂–µ –æ–ø—ã—Ç–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å.

üéÅ –≠—Ç–∏ –≥–∞–π–¥—ã ‚Äî –Ω–µ –≤–æ–¥–∞, –∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ –∏ –æ–ø—ã—Ç. –°–∫–∞—á–∏–≤–∞–π—Ç–µ, —á–∏—Ç–∞–π—Ç–µ –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ. –ü–æ–∫–∞ –¥—Ä—É–≥–∏–µ –≤ –ø–∞–Ω–∏–∫–µ ‚Äî –≤—ã —É–∂–µ –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏. –°—Å—ã–ª–∫–∏ –Ω–∏–∂–µ üëá
    """,
                         reply_markup=create_kb(1,
                                                faq_1='–ì–∞–π–¥ "–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –±–∏–∑–Ω–µ—Å"',
                                                faq_2='–ì–∞–π–¥ –ø–æ –ù–∞–ª–æ–≥–æ–≤—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º 2025',
                                                faq_3='–ì–∞–π–¥ "–ö–∞–∫ –≤–µ—Å—Ç–∏ —Å–µ–±—è –Ω–∞ –¥–æ–ø—Ä–æ—Å–µ"'
                                                ))


@router.callback_query(F.data == 'quest_1', StateFilter(default_state))
async def step_1(cb: CallbackQuery, state: FSMContext):
    add_user_to_db(
        cb.from_user.id,
        cb.from_user.username,
        cb.from_user.first_name,
        cb.from_user.last_name,
        datetime.datetime.now()
    )
    await cb.message.answer(text="""
–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?      
    """)
    await state.set_state(FSMFillForm.get_full_name)


@router.callback_query(F.data == 'new', StateFilter(default_state))
async def step_1_1(cb: CallbackQuery, state: FSMContext):
    add_user_to_db(
        cb.from_user.id,
        cb.from_user.username,
        cb.from_user.first_name,
        cb.from_user.last_name,
        datetime.datetime.now()
    )
    await cb.message.answer(text="""
–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?     
    """)
    await state.set_state(FSMFillForm.get_full_name)


@router.message(F.text, StateFilter(FSMFillForm.get_full_name))
async def step_2(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?')
    await state.set_state(FSMFillForm.get_question)


@router.message(F.text, StateFilter(FSMFillForm.get_question))
async def step_3(message: types.Message, state: FSMContext):
    await state.update_data(question=message.text)
    await message.answer(text='–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email)',
                         reply_markup=create_kb(1, telegram="–°–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"))
    await state.set_state(FSMFillForm.get_contact)


@router.message(F.text, StateFilter(FSMFillForm.get_contact))
async def step_4_1(message: types.Message, state: FSMContext):
    contact = message.text
    dct = await state.get_data()
    add_question_to_db(message.from_user.id, dct['full_name'], dct['question'], contact, datetime.datetime.now())
    await state.set_state(default_state)
    await state.clear()
    await message.answer(text='''
–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.
    
üíº –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –∑–∞–∫–æ–Ω–∞—Ö –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤:
üîπ YouTube (https://www.youtube.com/@urstart)
üîπ VK (https://vk.com/club229212039)
üîπ VC (https://vc.ru/u/4590675-andrei-kuvshinov-biznes-yurist)
üîπ –î–∑–µ–Ω (https://dzen.ru/id/5de8bbf3c7e50cf95e813aaa)
    ''',
                         reply_markup=create_kb(1,
                                                new='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚úÖ',
                                                faq='–•–æ—á—É –≥–∞–π–¥')
                         )


@router.callback_query(F.data == 'telegram', StateFilter(FSMFillForm.get_contact))
async def step_4_2(cb: types.CallbackQuery, state: FSMContext):
    add_user_to_db(
        cb.from_user.id,
        cb.from_user.username,
        cb.from_user.first_name,
        cb.from_user.last_name,
        datetime.datetime.now()
    )
    dct = await state.get_data()
    add_question_to_db(cb.from_user.id, dct['full_name'], dct['question'], '–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ', datetime.datetime.now())
    await state.set_state(default_state)
    await state.clear()
    await cb.message.answer(text='''
–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.
    
üíº –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –∑–∞–∫–æ–Ω–∞—Ö –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤:
üîπ YouTube (https://www.youtube.com/@urstart)
üîπ VK (https://vk.com/club229212039)
üîπ VC (https://vc.ru/u/4590675-andrei-kuvshinov-biznes-yurist)
üîπ –î–∑–µ–Ω (https://dzen.ru/id/5de8bbf3c7e50cf95e813aaa)
    ''',
                            reply_markup=create_kb(1,
                                                   new='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚úÖ',
                                                   faq='–•–æ—á—É –≥–∞–π–¥'))


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def user_blocked_bot(event: ChatMemberUpdated):
    update_user_blocked(event.from_user.id)


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def user_unblocked_bot(event: ChatMemberUpdated):
    update_user_unblocked(event.from_user.id)


@router.message(F.video_note, F.from_user.id.in_(ADMIN_IDS))
async def get_note(message: types.Message):
    print(message.video_note.file_id)


@router.message(F.text == 'Excel', F.from_user.id.in_(ADMIN_IDS), StateFilter(default_state))
async def excel(message: types.Message):
    quests = get_all_questions()
    users = get_all_users()
    wb = openpyxl.Workbook()
    sh = wb['Sheet']
    for i in range(1, len(quests) + 1):
        for y in range(1, 12):
            if quests[i-1][y-1]:
                sh.cell(i, y).value = quests[i-1][y-1]
    for i in range(len(quests) + 2, len(quests) + 2 + len(users)):
        for y in range(1, 8):
            if users[i - len(quests) - 2][y-1]:
                sh.cell(i, y).value = users[i - len(quests) - 2][y-1]
    wb.save('questions.xlsx')
    await message.answer_document(FSInputFile('questions.xlsx'))


@router.message(F.text == 'Csv', F.from_user.id.in_(ADMIN_IDS), StateFilter(default_state))
async def csv(message: types.Message):
    quests = get_all_questions()
    with open('questions.csv', 'w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        writer.writerows(quests)
    await message.answer_document(FSInputFile('questions.csv'))


@router.message(F.text == 'Delete_all', F.from_user.id.in_([1012882762]), StateFilter(default_state))
async def delete_all(message: Message):
    delete_all_questions()


@router.callback_query(F.data == 'faq_1', StateFilter(default_state))
async def faq(cb: CallbackQuery):
    add_user_to_db(
        cb.from_user.id,
        cb.from_user.username,
        cb.from_user.first_name,
        cb.from_user.last_name,
        datetime.datetime.now()
    )
    await cb.message.answer_document(FSInputFile('–ì–∞–π–¥ –ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –±–∏–∑–Ω–µ—Å.pdf'),
                                     reply_markup=create_kb(1,
                                                            quest_1="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚úÖ"))

@router.callback_query(F.data == 'faq_2', StateFilter(default_state))
async def faq(cb: CallbackQuery):
    add_user_to_db(
        cb.from_user.id,
        cb.from_user.username,
        cb.from_user.first_name,
        cb.from_user.last_name,
        datetime.datetime.now()
    )
    await cb.message.answer_document(
        FSInputFile('–ì–∞–π–¥ –ø–æ –ù–∞–ª–æ–≥–æ–≤—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º 2025.pdf'),
        reply_markup=create_kb(1,
                               quest_1="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚úÖ"))


@router.callback_query(F.data == 'faq_3', StateFilter(default_state))
async def faq(cb: CallbackQuery):
    add_user_to_db(
        cb.from_user.id,
        cb.from_user.username,
        cb.from_user.first_name,
        cb.from_user.last_name,
        datetime.datetime.now()
    )
    await cb.message.answer_document(
        FSInputFile('–ì–∞–π–¥ –ö–∞–∫ –≤–µ—Å—Ç–∏ —Å–µ–±—è –Ω–∞ –¥–æ–ø—Ä–æ—Å–µ.pdf'),
        reply_markup=create_kb(1,
                               quest_1="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚úÖ"))


@router.callback_query(F.data == 'faq', StateFilter(default_state))
async def faq(cb: CallbackQuery):
    add_user_to_db(
        cb.from_user.id,
        cb.from_user.username,
        cb.from_user.first_name,
        cb.from_user.last_name,
        datetime.datetime.now()
    )
    await cb.message.answer(text="""
–ú—ã –≤ –Æ–ö ¬´–°–¢–ê–†–¢¬ª –Ω–µ –ø—Ä–æ—Å—Ç–æ —é—Ä–∏—Å—Ç—ã ‚Äî –º—ã –≤–∞—à–∏ –∞–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–æ—é–∑–Ω–∏–∫–∏. –ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å 3 –ø—Ä–∞–∫—Ç–∏—á–Ω—ã—Ö –≥–∞–π–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–µ—Ä–µ–∂–∏—Ç—å –Ω–∞–ª–æ–≥–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –Ω–µ —É—Ç–æ–Ω—É—Ç—å –≤ –∫—Ä–∏–∑–∏—Å–µ.

üìç –ü–µ—Ä–≤—ã–π –≥–∞–π–¥ ‚Äî –∞–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏: –∫–∞–∫ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –ª–∏–∑–∏–Ω–≥–æ–º –∏ –±–∞–Ω–∫–∞–º–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –¥–µ–±–∏—Ç–æ—Ä–∫–æ–π, –∫–∞–∫ –Ω–µ —Å–ª–∏—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ –∏ –Ω–µ —É–≥–æ–¥–∏—Ç—å –ø–æ–¥ —Å—É–±—Å–∏–¥–∏–∞—Ä–∫—É.

üìç –í—Ç–æ—Ä–æ–π ‚Äî –ø—Ä–æ –Ω–∞–ª–æ–≥–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2025: —á—Ç–æ –∂–¥–∞—Ç—å, –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å (–∞ –≥–ª–∞–≤–Ω–æ–µ ‚Äî —á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å), —á—Ç–æ–±—ã –Ω–µ –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ –ø–ª–∞–Ω–µ –≤—ã–µ–∑–¥–Ω–æ–π.

üìç –¢—Ä–µ—Ç–∏–π –≥–∞–π–¥ ‚Äî —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≤—ã–∑—ã–≤–∞—é—Ç –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é –∏–ª–∏ –ú–í–î, –∫–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é, –∫–∞–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–æ–≤–µ—Ä—à–∞—é—Ç –¥–∞–∂–µ –æ–ø—ã—Ç–Ω—ã–µ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–∏ –∏ –∫–∞–∫ –∏—Ö –∏–∑–±–µ–∂–∞—Ç—å.

üéÅ –≠—Ç–∏ –≥–∞–π–¥—ã ‚Äî –Ω–µ –≤–æ–¥–∞, –∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ –∏ –æ–ø—ã—Ç. –°–∫–∞—á–∏–≤–∞–π—Ç–µ, —á–∏—Ç–∞–π—Ç–µ –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ. –ü–æ–∫–∞ –¥—Ä—É–≥–∏–µ –≤ –ø–∞–Ω–∏–∫–µ ‚Äî –≤—ã —É–∂–µ –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏. –°—Å—ã–ª–∫–∏ –Ω–∏–∂–µ üëá
    """,
                         reply_markup=create_kb(1,
                                                faq_1='–ì–∞–π–¥ "–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –±–∏–∑–Ω–µ—Å"',
                                                faq_2='–ì–∞–π–¥ –ø–æ –ù–∞–ª–æ–≥–æ–≤—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º 2025',
                                                faq_3='–ì–∞–π–¥ "–ö–∞–∫ –≤–µ—Å—Ç–∏ —Å–µ–±—è –Ω–∞ –¥–æ–ø—Ä–æ—Å–µ"',
                                                ))


# @router.channel_post()
# async def handle_channel_post(message: Message):
#     if message.chat.id != CHANEL_ID:
#         return
#
#     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
#     if message.media_group_id:
#         media_group_id = message.media_group_id
#
#         # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
#         if media_group_id in timers:
#             timers[media_group_id].cancel()
#
#         media_groups[media_group_id].append(message)
#
#         # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
#         timers[media_group_id] = asyncio.create_task(
#             process_media_group(media_group_id)
#         )
#     else:
#         # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞)
#         users = get_all_users()
#         cnt = 0
#         for user in users[1:]:
#             if not user[6]:
#                 try:
#                     await message.forward(chat_id=int(user[1]))
#                     await asyncio.sleep(0.2)
#                     cnt += 1
#                 except Exception as e:
#                     print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
#         await bot.send_message(1012882762, f'–ü–µ—Ä–µ—Å–ª–∞–Ω–æ {cnt} —é–∑–µ—Ä–∞–º')


#–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏


@router.message(F.text == 'Send', StateFilter(default_state), F.from_user.id.in_(ADMIN_IDS))
async def send_to_all(message: types.Message, state: FSMContext):
    await message.answer(text='–°–µ–π—á–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —é–∑–µ—Ä–∞–º!\n'
                              '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∂–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É(–º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º) –∏–ª–∏ –≤–∏–¥–µ–æ(–º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º) –∏–ª–∏ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫')
    await state.set_state(FSMFillForm.send)


#–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.text, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer(text='–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.text_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.text_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    await cb.message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    await cb.message.answer(text=dct['text'])
    await cb.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_text_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_text_1), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text=dct['text'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.text_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.text_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.text_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url(—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.text_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.text_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        await message.answer(text=dct['text'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
        await state.set_state(FSMFillForm.check_text_2)
    except Exception:
        await message.answer(text='–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.text_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_text_2), F.from_user.id.in_(ADMIN_IDS))
async def check_text_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text=dct['text'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.check_text_1, FSMFillForm.check_text_2), F.from_user.id.in_(ADMIN_IDS))
async def check_message_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.photo, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    try:
        await state.update_data(caption=message.caption)
    except Exception:
        pass
    await message.answer(text='–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.photo_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.photo_add_button), F.from_user.id.in_(ADMIN_IDS))
async def text_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    await cb.message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    if dct.get('caption'):
        await cb.message.answer_photo(photo=dct['photo_id'], caption=dct['caption'])
    else:
        await cb.message.answer_photo(photo=dct['photo_id'])
    await cb.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_photo_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_photo_1), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                await bot.send_photo(user_id, photo=dct['photo_id'], caption=dct['caption'])
            else:
                await bot.send_photo(user_id, photo=dct['photo_id'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.photo_add_button), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.photo_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.photo_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url(—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.photo_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.photo_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def photo_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        if dct.get('caption'):
            await message.answer_photo(photo=dct['photo_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        else:
            await message.answer_photo(photo=dct['photo_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
        await state.set_state(FSMFillForm.check_photo_2)
    except Exception as e:
        print(e)
        await message.answer(text='–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.photo_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_photo_2), F.from_user.id.in_(ADMIN_IDS))
async def check_photo_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                    await bot.send_photo(user_id, photo=dct['photo_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            else:
                await bot.send_photo(user_id, photo=dct['photo_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.check_text_1, FSMFillForm.check_text_2,
            FSMFillForm.check_photo_1, FSMFillForm.check_photo_2), F.from_user.id.in_(ADMIN_IDS))
async def check_message_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(F.video, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button(message: types.Message, state: FSMContext):
    await state.update_data(video_id=message.video.file_id)
    try:
        await state.update_data(caption=message.caption)
    except Exception:
        pass
    await message.answer(text='–î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.video_add_button)


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.video_add_button), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_no(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    await cb.message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    if dct.get('caption'):
        await cb.message.answer_video(video=dct['video_id'], caption=dct['caption'])
    else:
        await cb.message.answer_video(video=dct['video_id'])
    await cb.message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_video_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_1), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                await bot.send_video(user_id, video=dct['video_id'], caption=dct['caption'])
            else:
                await bot.send_video(user_id, video=dct['video_id'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.video_add_button), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_1(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏')
    await state.set_state(FSMFillForm.video_add_button_text)


@router.message(F.text, StateFilter(FSMFillForm.video_add_button_text), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_2(message: types.Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer(text='–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url(—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç, —Ç–µ–ª–µ–≥—Ä–∞–º–º)')
    await state.set_state(FSMFillForm.video_add_button_url)


@router.message(F.text, StateFilter(FSMFillForm.video_add_button_url), F.from_user.id.in_(ADMIN_IDS))
async def video_add_button_yes_3(message: types.Message, state: FSMContext):
    await state.update_data(button_url=message.text)
    dct = await state.get_data()
    try:
        await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        if dct.get('caption'):
            await message.answer_video(video=dct['video_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        else:
            await message.answer_video(video=dct['video_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
        await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
        await state.set_state(FSMFillForm.check_video_2)
    except Exception as e:
        print(e)
        await message.answer(text='–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url. –ù–∞–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π url')
        await state.set_state(FSMFillForm.video_add_button_url)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_2), F.from_user.id.in_(ADMIN_IDS))
async def check_video_yes_2(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            if dct.get('caption'):
                await bot.send_video(user_id, video=dct['video_id'], caption=dct['caption'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            else:
                await bot.send_video(user_id, photo=dct['video_id'], reply_markup=kb_button(dct['button_text'], dct['button_url']))
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


#–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞


@router.message(F.video_note, StateFilter(FSMFillForm.send), F.from_user.id.in_(ADMIN_IDS))
async def video_note_check(message: types.Message, state: FSMContext):
    await state.update_data(video_note_id=message.video_note.file_id)
    await message.answer(text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å –≤ –∫—Ä—É–∂–∫–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    await message.answer(text='–û—Ç–ø—Ä–∞–≤–ª—è–µ–º?', reply_markup=create_kb(2, yes='–î–∞', no='–ù–µ—Ç'))
    await state.set_state(FSMFillForm.check_video_note_1)


@router.callback_query(F.data == 'yes', StateFilter(FSMFillForm.check_video_note_1), F.from_user.id.in_(ADMIN_IDS))
async def check_video_note_yes_1(cb: types.CallbackQuery, state: FSMContext):
    dct = await state.get_data()
    users = get_all_users_unblock()
    count = 0
    for user_id in users:
        try:
            await bot.send_video_note(user_id, video_note=dct['video_note_id'])
            count += 1
        except Exception as e:
            await bot.send_message(1012882762, str(e))
            await bot.send_message(1012882762, str(user_id))
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —é–∑–µ—Ä–∞–º')
    await state.set_state(default_state)
    await state.clear()


# –í—ã—Ö–æ–¥ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏


@router.callback_query(F.data == 'no', StateFilter(FSMFillForm.check_text_1, FSMFillForm.check_text_2,
                       FSMFillForm.check_photo_1, FSMFillForm.check_photo_2, FSMFillForm.check_video_1,
                       FSMFillForm.check_video_2, FSMFillForm.check_video_note_1), F.from_user.id.in_(ADMIN_IDS))
async def check_message_no(cb: types.CallbackQuery, state: FSMContext):
    await cb.message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.set_state(default_state)
    await state.clear()





#–†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ–¥–Ω–æ–º—É —é–∑–µ—Ä—É
@router.message(F.text == 'Sendid', StateFilter(default_state), F.from_user.id.in_(ADMIN_IDS))
async def send_to_one_1(message: types.Message, state: FSMContext):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ id —é–∑–µ—Ä–∞')
    await state.set_state(FSMFillForm.send_id)


@router.message(F.text, StateFilter(FSMFillForm.send_id), F.from_user.id.in_(ADMIN_IDS))
async def send_to_one_2(message: types.Message, state: FSMContext):
    try:
        await state.update_data(user_id=int(message.text))
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —é–∑–µ—Ä—É –ø–æ id')
        await state.set_state(FSMFillForm.send_to_one)
    except Exception:
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        await state.set_state(default_state)


@router.message(F.text, StateFilter(FSMFillForm.send_to_one), F.from_user.id.in_(ADMIN_IDS))
async def send_to_one_3(message: types.Message, state: FSMContext):
    try:
        dct = await state.get_data()
        await bot.send_message(chat_id=dct['user_id'], text=message.text)
        await message.answer(text=f"–°–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É —Å id {dct['user_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception:
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å id –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±–æ—Ç–∞ —é–∑–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
    await state.set_state(default_state)
    await state.clear()


#–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∞–¥–º–∏–Ω–∞–º
@router.message(F.text, ~F.from_user.id.in_(ADMIN_IDS))
async def forward_message(message: types.Message):
    for admin_id in ADMIN_IDS:
        try:
            await bot.forward_message(chat_id=admin_id, from_chat_id=message.chat.id, message_id=message.message_id)
            await bot.send_message(chat_id=admin_id, text=f'{message.from_user.username}(ID{message.from_user.id})')
        except:
            pass


#–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–∞ –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ reply

@router.message(F.text, F.from_user.id.in_(ADMIN_IDS))
async def answer_admin_text(message: Message):
    if message.reply_to_message:
        try:
            if '(ID' in message.reply_to_message.text:
                user_id = int(message.reply_to_message.text[:-1].split('(ID')[-1])
                await bot.send_message(chat_id=user_id, text=message.text)
                await message.answer(text=f'–°–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É —Å id {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
        except Exception:
            await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
