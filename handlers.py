import asyncio
import csv
import datetime
import openpyxl
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot import bot
from spread import get_sheet

from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, StateFilter, ChatMemberUpdatedFilter, KICKED, MEMBER
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated, FSInputFile, InlineKeyboardButton, InputMediaPhoto, \
    InputMediaVideo, InputMediaDocument
from collections import defaultdict
from typing import Dict, List
from config import ADMIN_IDS, CHANEL_ID
from db.util import add_user_to_db, update_user_blocked, update_user_unblocked, add_question_to_db, get_all_questions, \
    delete_all_questions, get_all_users
from keyboard import create_kb

router = Router()

media_groups: Dict[str, List[Message]] = defaultdict(list)
timers: Dict[str, asyncio.Task] = {}
builder = InlineKeyboardBuilder()

builder.row(InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚úÖ", callback_data="quest_1"))
builder.row(InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª", url="https://t.me/andreikuvshinov"))

main_keyboard_markup = builder.as_markup()

class FSMFillForm(StatesGroup):
    get_full_name = State()
    get_question = State()
    get_contact = State()


async def scheduler(time):
    while True:
        await asyncio.sleep(10)
        print(datetime.datetime.now())
        try:
            sheet = await get_sheet()
            sheet.clear()
            quests = get_all_questions()
            users = get_all_users()
            sheet.append_rows(quests)
            sheet.append_rows(users)
            empty_row = ['' for cell in range(sheet.col_count)]
            sheet.insert_row(empty_row, len(quests) + 1)
            print(datetime.datetime.now())
        except Exception as e:
            await bot.send_message(1012882762, str(e))
        await asyncio.sleep(time)


async def process_media_group(media_group_id: str):
    await asyncio.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –≥—Ä—É–ø–ø—ã
    messages = media_groups.pop(media_group_id, [])

    if not messages:
        return

    # –°–æ–±–∏—Ä–∞–µ–º –º–µ–¥–∏–∞ –¥–ª—è –∞–ª—å–±–æ–º–∞
    media = []
    for idx, msg in enumerate(messages):
        if msg.photo:
            file_id = msg.photo[-1].file_id
            item = InputMediaPhoto(media=file_id)
        elif msg.video:
            file_id = msg.video.file_id
            item = InputMediaVideo(media=file_id)
        elif msg.document:
            file_id = msg.document.file_id
            item = InputMediaDocument(media=file_id)
        else:
            continue

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        if idx == 0 and msg.caption:
            item.caption = msg.caption
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–¥–µ—Å—å: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ parse_mode
            if hasattr(msg, 'parse_mode'):
                item.parse_mode = msg.parse_mode

        media.append(item)

    if media:
        users = get_all_users()
        cnt = 0
        for user in users[1:]:
            if not user[6]:
                try:
                    await bot.send_media_group(chat_id=int(user[1]), media=media)
                    await asyncio.sleep(0.2)
                    cnt += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
        await bot.send_message(1012882762, f'–ü–µ—Ä–µ—Å–ª–∞–Ω–æ {cnt} —é–∑–µ—Ä–∞–º')


@router.message(CommandStart(), StateFilter(default_state))
async def process_start_user(message: Message):
    add_user_to_db(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name,
        datetime.datetime.now()
    )
    await message.answer_video_note('DQACAgIAAxkBAAMkZ7YTobVOP3LcI_-weFilb18kwXkAAiJtAALpnalJe1wSU2ZnRM82BA')
    await asyncio.sleep(0.3)
    await message.answer(
        text="""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëãüèª

–í—ã –ø–æ–ø–∞–ª–∏ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ê–Ω–¥—Ä–µ—è –ö—É–≤—à–∏–Ω–æ–≤–∞ ‚Äì –±–∏–∑–Ω–µ—Å-—é—Ä–∏—Å—Ç–∞.

üîπ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–∞, –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞ –∏ –∑–∞—â–∏—Ç—ã –±–∏–∑–Ω–µ—Å–∞.

üìå –ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?
–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–æ—Ä–º—É ‚Äì –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

üíº –ü–æ–º–æ–≥–∞–µ–º –±–∏–∑–Ω–µ—Å—É —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Å—Ç–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!
        """,
        parse_mode=ParseMode.HTML,
        reply_markup=main_keyboard_markup
    )
    await asyncio.sleep(1)
    await message.answer(text="""
üìò –ú—ã –≤ –Æ–ö ¬´–°–¢–ê–†–¢¬ª –Ω–µ –ø—Ä–æ—Å—Ç–æ —é—Ä–∏—Å—Ç—ã ‚Äî –º—ã –≤–∞—à–∏ –∞–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–æ—é–∑–Ω–∏–∫–∏. –ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å 2 –ø—Ä–∞–∫—Ç–∏—á–Ω—ã—Ö –≥–∞–π–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–µ—Ä–µ–∂–∏—Ç—å –Ω–∞–ª–æ–≥–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –Ω–µ —É—Ç–æ–Ω—É—Ç—å –≤ –∫—Ä–∏–∑–∏—Å–µ.

üìç –ü–µ—Ä–≤—ã–π –≥–∞–π–¥ ‚Äî –∞–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏: –∫–∞–∫ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –ª–∏–∑–∏–Ω–≥–æ–º –∏ –±–∞–Ω–∫–∞–º–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –¥–µ–±–∏—Ç–æ—Ä–∫–æ–π, –∫–∞–∫ –Ω–µ —Å–ª–∏—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ –∏ –Ω–µ —É–≥–æ–¥–∏—Ç—å –ø–æ–¥ —Å—É–±—Å–∏–¥–∏–∞—Ä–∫—É.

üìç –í—Ç–æ—Ä–æ–π ‚Äî –ø—Ä–æ –Ω–∞–ª–æ–≥–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2025: —á—Ç–æ –∂–¥–∞—Ç—å, –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å (–∞ –≥–ª–∞–≤–Ω–æ–µ ‚Äî —á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å), —á—Ç–æ–±—ã –Ω–µ –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ –ø–ª–∞–Ω–µ –≤—ã–µ–∑–¥–Ω–æ–π.

üéÅ –≠—Ç–∏ –≥–∞–π–¥—ã ‚Äî –Ω–µ –≤–æ–¥–∞, –∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ –∏ –æ–ø—ã—Ç. *–°–∫–∞—á–∏–≤–∞–π—Ç–µ, —á–∏—Ç–∞–π—Ç–µ –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ*. –ü–æ–∫–∞ –¥—Ä—É–≥–∏–µ –≤ –ø–∞–Ω–∏–∫–µ ‚Äî –≤—ã —É–∂–µ –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏. –°—Å—ã–ª–∫–∏ –Ω–∏–∂–µ üëá  
    """,
                         reply_markup=create_kb(1,
                                                faq_1='–ì–∞–π–¥ "–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –±–∏–∑–Ω–µ—Å"',
                                                faq_2='–ì–∞–π–¥ –ø–æ –ù–∞–ª–æ–≥–æ–≤—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º 2025'))


@router.callback_query(F.data == 'quest_1', StateFilter(default_state))
async def step_1(cb: CallbackQuery, state: FSMContext):
    add_user_to_db(
        cb.from_user.id,
        cb.from_user.username,
        cb.from_user.first_name,
        cb.from_user.last_name,
        datetime.datetime.now()
    )
    await cb.message.answer(text="""
–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?      
    """)
    await state.set_state(FSMFillForm.get_full_name)


@router.callback_query(F.data == 'new', StateFilter(default_state))
async def step_1_1(cb: CallbackQuery, state: FSMContext):
    add_user_to_db(
        cb.from_user.id,
        cb.from_user.username,
        cb.from_user.first_name,
        cb.from_user.last_name,
        datetime.datetime.now()
    )
    await cb.message.answer(text="""
–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?     
    """)
    await state.set_state(FSMFillForm.get_full_name)


@router.message(F.text, StateFilter(FSMFillForm.get_full_name))
async def step_2(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?')
    await state.set_state(FSMFillForm.get_question)


@router.message(F.text, StateFilter(FSMFillForm.get_question))
async def step_3(message: types.Message, state: FSMContext):
    await state.update_data(question=message.text)
    await message.answer(text='–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email)',
                         reply_markup=create_kb(1, telegram="–°–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"))
    await state.set_state(FSMFillForm.get_contact)


@router.message(F.text, StateFilter(FSMFillForm.get_contact))
async def step_4_1(message: types.Message, state: FSMContext):
    contact = message.text
    dct = await state.get_data()
    add_question_to_db(message.from_user.id, dct['full_name'], dct['question'], contact, datetime.datetime.now())
    await state.set_state(default_state)
    await state.clear()
    await message.answer(text='''
–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.
    
üíº –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –∑–∞–∫–æ–Ω–∞—Ö –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤:
üîπ YouTube (https://www.youtube.com/@urstart)
üîπ VK (https://vk.com/club229212039)
üîπ VC (https://vc.ru/u/4590675-andrei-kuvshinov-biznes-yurist)
üîπ –î–∑–µ–Ω (https://dzen.ru/id/5de8bbf3c7e50cf95e813aaa)
    ''',
                         reply_markup=create_kb(1,
                                                new='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚úÖ',
                                                faq='–•–æ—á—É –≥–∞–π–¥')
                         )


@router.callback_query(F.data == 'telegram', StateFilter(FSMFillForm.get_contact))
async def step_4_2(cb: types.CallbackQuery, state: FSMContext):
    add_user_to_db(
        cb.from_user.id,
        cb.from_user.username,
        cb.from_user.first_name,
        cb.from_user.last_name,
        datetime.datetime.now()
    )
    dct = await state.get_data()
    add_question_to_db(cb.from_user.id, dct['full_name'], dct['question'], '–ù–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ', datetime.datetime.now())
    await state.set_state(default_state)
    await state.clear()
    await cb.message.answer(text='''
–°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.
    
üíº –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –∑–∞–∫–æ–Ω–∞—Ö –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤:
üîπ YouTube (https://www.youtube.com/@urstart)
üîπ VK (https://vk.com/club229212039)
üîπ VC (https://vc.ru/u/4590675-andrei-kuvshinov-biznes-yurist)
üîπ –î–∑–µ–Ω (https://dzen.ru/id/5de8bbf3c7e50cf95e813aaa)
    ''',
                            reply_markup=create_kb(1,
                                                   new='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚úÖ',
                                                   faq='–•–æ—á—É –≥–∞–π–¥'))


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def user_blocked_bot(event: ChatMemberUpdated):
    update_user_blocked(event.from_user.id)


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def user_unblocked_bot(event: ChatMemberUpdated):
    update_user_unblocked(event.from_user.id)


@router.message(F.video_note, F.from_user.id.in_(ADMIN_IDS))
async def get_note(message: types.Message):
    print(message.video_note.file_id)


@router.message(F.text == 'Excel', F.from_user.id.in_(ADMIN_IDS), StateFilter(default_state))
async def excel(message: types.Message):
    quests = get_all_questions()
    users = get_all_users()
    wb = openpyxl.Workbook()
    sh = wb['Sheet']
    for i in range(1, len(quests) + 1):
        for y in range(1, 12):
            if quests[i-1][y-1]:
                sh.cell(i, y).value = quests[i-1][y-1]
    for i in range(len(quests) + 2, len(quests) + 2 + len(users)):
        for y in range(1, 8):
            if users[i - len(quests) - 2][y-1]:
                sh.cell(i, y).value = users[i - len(quests) - 2][y-1]
    wb.save('questions.xlsx')
    await message.answer_document(FSInputFile('questions.xlsx'))


@router.message(F.text == 'Csv', F.from_user.id.in_(ADMIN_IDS), StateFilter(default_state))
async def csv(message: types.Message):
    quests = get_all_questions()
    with open('questions.csv', 'w', encoding='utf-8', newline='') as f:
        writer = csv.writer(f)
        writer.writerows(quests)
    await message.answer_document(FSInputFile('questions.csv'))


@router.message(F.text == 'Delete_all', F.from_user.id.in_([1012882762]), StateFilter(default_state))
async def delete_all(message: Message):
    delete_all_questions()


@router.callback_query(F.data == 'faq_1', StateFilter(default_state))
async def faq(cb: CallbackQuery):
    add_user_to_db(
        cb.from_user.id,
        cb.from_user.username,
        cb.from_user.first_name,
        cb.from_user.last_name,
        datetime.datetime.now()
    )
    await cb.message.answer_document(FSInputFile('–ì–∞–π–¥ –ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –±–∏–∑–Ω–µ—Å.pdf'),
                                     reply_markup=create_kb(1,
                                                            quest_1="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚úÖ"))

@router.callback_query(F.data == 'faq_2', StateFilter(default_state))
async def faq(cb: CallbackQuery):
    add_user_to_db(
        cb.from_user.id,
        cb.from_user.username,
        cb.from_user.first_name,
        cb.from_user.last_name,
        datetime.datetime.now()
    )
    await cb.message.answer_document(
        FSInputFile('–ì–∞–π–¥ –ø–æ –ù–∞–ª–æ–≥–æ–≤—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º 2025.pdf'),
        reply_markup=create_kb(1,
                               quest_1="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚úÖ"))


@router.callback_query(F.data == 'faq', StateFilter(default_state))
async def faq(cb: CallbackQuery):
    add_user_to_db(
        cb.from_user.id,
        cb.from_user.username,
        cb.from_user.first_name,
        cb.from_user.last_name,
        datetime.datetime.now()
    )
    await cb.message.answer(text="""
üìò –ú—ã –≤ –Æ–ö ¬´–°–¢–ê–†–¢¬ª –Ω–µ –ø—Ä–æ—Å—Ç–æ —é—Ä–∏—Å—Ç—ã ‚Äî –º—ã –≤–∞—à–∏ –∞–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–æ—é–∑–Ω–∏–∫–∏. –ü–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å 2 –ø—Ä–∞–∫—Ç–∏—á–Ω—ã—Ö –≥–∞–π–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–µ—Ä–µ–∂–∏—Ç—å –Ω–∞–ª–æ–≥–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –Ω–µ —É—Ç–æ–Ω—É—Ç—å –≤ –∫—Ä–∏–∑–∏—Å–µ.

üìç –ü–µ—Ä–≤—ã–π –≥–∞–π–¥ ‚Äî –∞–Ω—Ç–∏–∫—Ä–∏–∑–∏—Å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏: –∫–∞–∫ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –ª–∏–∑–∏–Ω–≥–æ–º –∏ –±–∞–Ω–∫–∞–º–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –¥–µ–±–∏—Ç–æ—Ä–∫–æ–π, –∫–∞–∫ –Ω–µ —Å–ª–∏—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ –∏ –Ω–µ —É–≥–æ–¥–∏—Ç—å –ø–æ–¥ —Å—É–±—Å–∏–¥–∏–∞—Ä–∫—É.

üìç –í—Ç–æ—Ä–æ–π ‚Äî –ø—Ä–æ –Ω–∞–ª–æ–≥–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ 2025: —á—Ç–æ –∂–¥–∞—Ç—å, –∫–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å (–∞ –≥–ª–∞–≤–Ω–æ–µ ‚Äî —á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç—å), —á—Ç–æ–±—ã –Ω–µ –æ–∫–∞–∑–∞—Ç—å—Å—è –≤ –ø–ª–∞–Ω–µ –≤—ã–µ–∑–¥–Ω–æ–π.

üéÅ –≠—Ç–∏ –≥–∞–π–¥—ã ‚Äî –Ω–µ –≤–æ–¥–∞, –∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ –∏ –æ–ø—ã—Ç. *–°–∫–∞—á–∏–≤–∞–π—Ç–µ, —á–∏—Ç–∞–π—Ç–µ –∏ –¥–µ–π—Å—Ç–≤—É–π—Ç–µ*. –ü–æ–∫–∞ –¥—Ä—É–≥–∏–µ –≤ –ø–∞–Ω–∏–∫–µ ‚Äî –≤—ã —É–∂–µ –Ω–∞ —à–∞–≥ –≤–ø–µ—Ä–µ–¥–∏. –°—Å—ã–ª–∫–∏ –Ω–∏–∂–µ üëá  
    """,
                         reply_markup=create_kb(1,
                                                faq_1='–ì–∞–π–¥ "–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –±–∏–∑–Ω–µ—Å"',
                                                faq_2='–ì–∞–π–¥ –ø–æ –ù–∞–ª–æ–≥–æ–≤—ã–º –ø—Ä–æ–≤–µ—Ä–∫–∞–º 2025'))


@router.channel_post()
async def handle_channel_post(message: Message):
    if message.chat.id != CHANEL_ID:
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
    if message.media_group_id:
        media_group_id = message.media_group_id

        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        if media_group_id in timers:
            timers[media_group_id].cancel()

        media_groups[media_group_id].append(message)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        timers[media_group_id] = asyncio.create_task(
            process_media_group(media_group_id)
        )
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞)
        users = get_all_users()
        cnt = 0
        for user in users[1:]:
            if not user[6]:
                try:
                    await message.forward(chat_id=int(user[1]))
                    await asyncio.sleep(0.2)
                    cnt += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        await bot.send_message(1012882762, f'–ü–µ—Ä–µ—Å–ª–∞–Ω–æ {cnt} —é–∑–µ—Ä–∞–º')
